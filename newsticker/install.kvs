# script newsticker for KVIrc :)
# Written by Szymon Stefanek (2006)

# register the script: this must be the first instruction executed
# since it will abort with an error when a greater version is already installed
addon.register( \
		"newsticker", \
		"1.2.0", \
		$tr("Newsticker: The RSS News Reader","newsticker"), \
		$tr("Displays RSS news feeds from various sources","newsticker"), \
		"4.0.4", \
		newsticker_32.png \
	)
{
	# This is our uninstall callback: it will be called by KVIrc when addon.uninstall is invoked
	
	# The stuff should be destroyed in reverse order, if possible.

	# Unload the translation, if any
	trunload "newsticker"
	
	# Close any running instance
	#newsticker::close
	
	# Kill aliases
	alias -q ("newsticker::close"){}
	alias -q ("newsticker::show"){}
	
	# Kill actions
	action.destroy -q "newsticker::toggle";
	
	# Kill classes (reversed order)
	objects.killClass -q "newsticker::window"
	objects.killClass -q "newsticker::configuration"
	objects.killClass -q "newsticker::controller"
	objects.killClass -q "newsticker::qtwrapper"
	objects.killClass -q "newsticker::source"
	objects.killClass -q "newsticker::rss::reader"
	objects.killClass -q "newsticker::rss::entrylist"
	objects.killClass -q "newsticker::rss::entry"
}

addon.setconfigurecallback(newsticker)
{
	newsticker::configure
}


# Ok, addon.register succeeded. We can go on with the installation.

# get the installer helper class (this is pretty standard and included in the distro)

# Get the path that this script was launched from
%mypath = $file.extractPath($0)
//%mypath = $str.lefttolast($0,/)

addon.installfiles "newsticker" "pics" "%mypath/pics/*.png"
addon.installfiles "newsticker" "locale" "%mypath/locale/*.mo"
addon.installfiles "newsticker" "help/en" "%mypath/help/en/newsticker/*.html"

parse "%mypath/src/rssentry.kvs"
parse "%mypath/src/rssentrylist.kvs"
parse "%mypath/src/rssreader.kvs"
parse "%mypath/src/source.kvs"
parse "%mypath/src/qtwrapper.kvs"
parse "%mypath/src/configuration.kvs"
parse "%mypath/src/controller.kvs"
parse "%mypath/src/window.kvs"

parse "%mypath/src/aliases.kvs"
parse "%mypath/src/actions.kvs"

# make sure any previous instance is closed
newsticker::close

# show it up :)
newsticker::show

